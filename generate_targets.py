#!/usr/bin/env python3
# generate_targets.py
# Generates a Makefile fragment with build/run/recover/lldb targets.

BUILD_DIRS = ["build", "build-debug"]
EXEC_NAMES = ["basic_join", "basic_group", "basic_group_variant"]
NUMJOBS = "$(NUMJOBS)"
CMAKE_OPTIONS = "$(CMAKE_OPTIONS)"
CMAKE_DEBUG = "$(CMAKE_DEBUG)"
CMAKE_RELWITHDEBINFO = "$(CMAKE_RELWITHDEBINFO)"
LEANSTORE_FLAGS = "$(leanstore_flags)"
DRAM = "$(dram)"
SCALE = "$(scale)"
IMAGE_DIR = "/mnt/hdd/leanstore_images"


def print_title(title):
    print("# " + "-" * (40 + len(title)))
    print("# " + "-" * 20 + title + "-" * 20)

def cmake_cmd(dir_name):
    if "debug" in dir_name:
        return CMAKE_DEBUG
    else:
        return CMAKE_RELWITHDEBINFO
    
def get_executable_path(dir, exe):
    return f"{dir}/frontend/{exe}"

def get_config_dir(dir, exe):
    return f"{dir}/{exe}"

def get_image_file(exe):
    return f"{IMAGE_DIR}/{exe}/{SCALE}.image"

def get_runtime_dir(dir, exe):
    return f"{get_config_dir(dir, exe)}/{SCALE}-in-{DRAM}" # Not in frontend so that this dir is to not be confused with the executable

def main():
    print("# --- autoâ€‘generated by generate_targets.py; DO NOT EDIT ---\n")
    # BUILD rules
    print_title("executables")
    for d in BUILD_DIRS:
        for exe in EXEC_NAMES:
            path = get_executable_path(d, exe)
            print(f"{path}: check_perf_event_paranoid")
            print(f"\t@echo \"Building {path}\"")
            print(f"\tcd {d}/frontend && {cmake_cmd(d)} {CMAKE_OPTIONS} && make {exe} -j{NUMJOBS}\n")
            
    # csv dirs
    print_title("csv dirs")
    for d in BUILD_DIRS:
        for exe in EXEC_NAMES:
            csvdir = get_runtime_dir(d, exe)
            print(f"{csvdir}: ")
            print(f"\t@echo \"Creating CSV directory {csvdir}\"")
            print(f"\tmkdir -p {csvdir}\n")
            
    # image files
    print_title("image files")
    for exe in EXEC_NAMES:
        imagefile = get_image_file(exe)
        print(f"{imagefile}: ")
        print(f"\t@echo \"Creating image file {imagefile}\"")
        print(f"\tmkdir -p {IMAGE_DIR}/{exe} && touch {imagefile}\n")

    # RECOVER rules
    print_title("recover_files")
    for d in BUILD_DIRS:
        for exe in EXEC_NAMES:
            recover = f"{get_config_dir(d, exe)}/{SCALE}.json"
            csvdir = get_runtime_dir(d, exe)
            executable = get_executable_path(d, exe)
            image_file = get_image_file(exe)
            print(f"{recover}: {executable} {csvdir} {image_file}")
            print(f"\t@echo \"Persisting data to {recover}\"")
            print(f"\t{executable} {LEANSTORE_FLAGS} --csv_path={csvdir} --persist_file=$@ --trunc=true --ssd_path={image_file} 2>{csvdir}/stderr.txt\n")

    # RUN rules
    print_title("experiments")
    for exe in EXEC_NAMES:
        jsonfile = f"{get_config_dir(BUILD_DIRS[0], exe)}/{SCALE}.json"
        csvdir = get_runtime_dir(BUILD_DIRS[0], exe)
        executable = get_executable_path(BUILD_DIRS[0], exe)
        image_file = get_image_file(exe)
        print(f"{exe}: {executable} {jsonfile}")
        print(f"\t@echo \"Running {exe}\"")
        print(f"\tscript -q -c \"{executable} {LEANSTORE_FLAGS} --csv_path={csvdir} --recover_file={jsonfile} --ssd_path={image_file} 2>{csvdir}/stderr.txt\" {csvdir}/log\n")

    # LLDB rules
    print_title("experiments with lldb")
    for exe in EXEC_NAMES:
        # jsonfile = f"{BUILD_DIRS[1]}/frontend/{exe}/{SCALE}.json"
        # csvdir = f"{BUILD_DIRS[1]}/frontend/{exe}/{SCALE}-in-{DRAM}"
        jsonfile = f"{get_config_dir(BUILD_DIRS[1], exe)}/{SCALE}.json"
        csvdir = get_runtime_dir(BUILD_DIRS[1], exe)
        executable = get_executable_path(BUILD_DIRS[1], exe)
        image_file = get_image_file(exe)
        print(f"{exe}_lldb: {executable} {jsonfile}")
        print(f"\t@echo \"Running {exe}_lldb\"")
        print(f"\tlldb --source .lldbinit -- {executable} {LEANSTORE_FLAGS} --csv_path={csvdir} --recover_file={jsonfile} --ssd_path={image_file}\n")

    # PHONY declaration
    all_phony = EXEC_NAMES + [f"{exe}_lldb" for exe in EXEC_NAMES]
    print(f".PHONY: check_perf_event_paranoid {' '.join(all_phony)}")

if __name__ == "__main__":
    main()